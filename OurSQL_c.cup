/*
    Daniel Oh, John Wayne Creech
    CSC4340: Introduction to Compilers
    Project Phase II

*/


/* ----------------------Preliminary Declarations Section--------------------*/

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

action code {:
    File file = new File(".");
    Database db = new Database();

:}

parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public parser (java.io.Reader input) {
        super(new Lexer(input));
    }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */


terminal            SEMI, FROM, DISTINCT, SELECT, WHERE, EXISTS, IN, NOT, AND, LPAREN, RPAREN, PERIOD, COMMA;
terminal String     STRING, NAME, COMPARISON, INTNUM;

non terminal SQLNode sql_start, select_stmt;
non terminal boolean opt_distinct;
non terminal ArrayList<Column> select_list;
non terminal ArrayList<String[]> from_clause, table_ref_commalist;
non terminal Column column_ref;
non terminal String scalar_exp, literal, table, range_variable;
non terminal String[] table_ref;
non terminal WhereNode predicate, pred;
non terminal WhereNode comparison_pred, in_pred, exists_pred;
non terminal WhereNode where_clause, search_condition;

/*------------------------------ Grammar ------------------------------*/
/*
    <sql_start> ::=<select_stmt> SEMI
    <select_stmt> ::= SELECT <opt_distinct> <select_list> <from_clause> <opt_where_clause>
    <opt_distinct> ::= / empty / | DISTINCT
    <select_list> ::= <column_ref> | <select_list> ',' <column_ref>
    <column_ref> ::= NAME | NAME '.' NAME
    <from_clause> ::= FROM <table_ref_commalist>
    <table_ref_commalist> ::= <table_ref> | <table_ref_commalist> ',' <table_ref>
    <table_ref> ::= <table> | <table> <range_variable>
    <table> ::= NAME
    <range_variable> ::= NAME
    <opt_where_clause> ::= / empty / | <where_clause>
    <where_clause> ::= WHERE <search_condition>
    <search_condition> ::= <predicate> | <search_condition> AND <predicate>
    <predicate> ::= <pred> | NOT <pred>
    <pred> ::= <comparison_pred> | <in_pred> | <exists_pred>
    <comparison_pred> ::= <scalar_exp> COMPARISON <scalar_exp>
    <scalar_exp> ::= <literal> | <column_ref>
    <literal> ::= STRING | INTNUM
    <in_pred> ::= <scalar_exp> IN '(' <select_stmt> ')'
    <exists_pred> ::= EXISTS '(' <select_stmt> ')'
------------------------------------------------------------------------*/

sql_start       ::= select_stmt:select SEMI
                    {:
                        SQLNode sql = select;
                        db.initializeDatabase(file.getAbsolutePath() + "\\db");
                        System.out.println("No Semantic Error");
                        System.out.println("No Syntax Error");
                        RESULT = sql;
                    :}
;

select_stmt     ::= SELECT opt_distinct:dist select_list:sel from_clause:from opt_where_clause:where
                    {:
                        SQLNode node = new SQLNode();
                        if(dist != ""){
                            node.setDistinct(dist);
                        }
                        node.setColumns(sel);
                        node.setRelation(from);
                        if(where != NULL){
                            node.setWhereNode(where);
                        }
                        RESULT = node;
                     :}
;

opt_distinct    ::= DISTINCT
                    {: RESULT = true; :}
                    |
                    /* empty */
;

select_list     ::= column_ref:col
                    {:
                        ArrayList<Column> columns = new ArrayList<Column>();
                        columns.add(col);
                        RESULT = columns;
                     :}
                    |
                    select_list:sl COMMA column_ref:col
                    {:
                        ArrayList<Column> columns = sl;
                        col.setCi(columns.size());
                        columns.add(col);
                        RESULT = columns;
                    :}
;

column_ref      ::= NAME:n
                    {:
                        Column col = new Column();
                        col.setName(n);
                        RESULT = col;
                    :}
                    |
                    NAME:n1 PERIOD NAME:n2
                    {:
                        db.initializeDatabase(file.getAbsolutePath() + "\\db");
                        if(db.relationExists(n1.toUpperCase())){
                            if(db.getRelation(n1.toUpperCase()).attributeExists(n2.toUpperCase())){
                                Column col = new Column();
                                col.setPrefix(n1);
                                col.setName(n2);
                                RESULT = col;
                            }
                            else{
                               System.out.println("Semantic Error - Column " + n1 + " Not defined");
                            }
                        }
                        else{
                            System.out.println("Semantic Error - Relation " + n2 + " does not exist 2");
                        }
                    :}
;

from_clause     ::= FROM table_ref_commalist:table
                    {:
                        RESULT = table;
                    :}
;

table_ref_commalist ::= table_ref:table
                    {:
                        ArrayList<String[]> tab = new ArrayList<String[]>();
                        tab.add(table);
                        RESULT = tab;
                    :}
                    |
                    table_ref_commalist:list COMMA table_ref:table
                    {:
                        ArrayList<String[]> tab = list;
                        tab.add(table);
                        RESULT = tab;
                    :}
;

table_ref       ::= table:tab
                    {:
                        String[] s = {tab, ""};
                        RESULT = s;
                    :}
                    |
                    table:tab range_variable:range
                    {:
                        String[] s = {tab, range};
                        RESULT = s;
                    :}
;

table           ::= NAME:n
                    {:
                        RESULT = n;
                    :}
;

range_variable  ::= NAME:n
                    {:
                        RESULT = n;
                    :}
;

opt_where_clause ::= where_clause:where
                     {:
                        RESULT = where;
                     :}
                     |
                     /* empty */
;

where_clause    ::= WHERE search_condition:search
                    {:
                        WhereNode where = search;
                        RESULT = search;
                    :}
;

search_condition ::= predicate:n
                    {:
                        WhereNode where = n;
                        RESULT = where;
                    :}
                    |
                    search_condition:n AND predicate:m
                    {:
                        WhereNode where = m;
                        where.subQuery(n);
                        RESULT = where;
                    :}
;

predicate       ::= pred:n
                    {:
                        RESULT = n;
                    :}
                    |
                    NOT pred:n
                    {:
                        WhereNode where = n;
                        where.setNegated(true);
                        RESULT = where;
                     :}
;

pred            ::= comparison_pred:n
                    {:
                        WhereNode where = n;
                        RESULT = n;
                    :}
                    |
                    in_pred:n
                    {:
                        WhereNode where = n;
                        where.setNested(true);
                        where.setNestingType("in");
                        RESULT = where;
                    :}
                    |
                    exists_pred:n
                    {:
                        WhereNode where = n;
                        where.setNested(true);
                        where.setNestingType("exists");
                        RESULT = where;
                    :}
;

comparison_pred ::= scalar_exp:n COMPARISON:comp scalar_exp:m
                    {:
                        WhereNode where = new WhereNode();
                        where.setLeftOperand(n);
                        where.setRightOperand(m);
                        where.setComparison(comp);
                        RESULT = where;
                    :}
;

scalar_exp      ::= literal:n
                    {:
                        RESULT = n;
                    :}
                    |
                    column_ref:n
                    {:
                        RESULT = n;
                    :}
;

literal         ::= STRING:n
                    {:
                        WhereNode where = new WhereNode();
                        if(where.getLeftOperand() == null){
                            where.setLeftOperand(n);
                            where.setLeftOperandType("STRING");
                        }else{
                            where.setRightOperand(n);
                            where.setRightOperandType("STRING");
                        }
                        RESULT = where;
                    :}
                    |
                    INTNUM:n
                    {:
                        WhereNode where = new WhereNode();
                        if(where.getLeftOperand() == null){
                            where.setLeftOperand(n);
                            where.setLeftOperandType("INTNUM");
                        }else{
                            where.setRightOperand(n);
                            where.setRightOperandType("INTNUM");
                        }
                        RESULT = where;
                    :}
;

in_pred         ::= scalar_exp:scale IN LPAREN select_stmt:select RPAREN
                    {:
                        WhereNode where = new WhereNode();
                        where.setLeftOperand(scale);
                        where.setNestingType("in");
                        where.setRightResolveNode(select);
                        RESULT = where;
                    :}
;

exists_pred     ::= EXISTS LPAREN select_stmt:select RPAREN
                    {:
                        WhereNode where = new WhereNode();
                        where.setSubQuery(select);
                        RESULT = where;
                    :}
;